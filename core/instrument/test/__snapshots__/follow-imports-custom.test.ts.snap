// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`follow-imports-custom BooleanEditor 1`] = `
Object {
  "exportedAs": "BooleanEditor",
  "filePath": "/Users/atanasster/component-controls/ui/editors/src/BooleanEditor/BooleanEditor.tsx",
  "from": "./BooleanEditor",
  "importedName": "BooleanEditor",
  "loc": Object {
    "end": Object {
      "column": 18,
      "line": 21,
    },
    "start": Object {
      "column": 2,
      "line": 15,
    },
  },
  "originalFilePath": "/Users/atanasster/component-controls/ui/editors/src/BooleanEditor/BooleanEditor.tsx",
  "source": "import React from 'react';
import { ComponentControlBoolean } from '@component-controls/specification';
import { Toggle, FlexContainer } from '@component-controls/components';
import { PropertyControlProps, PropertyEditor } from '../types';

export interface BooleanEditorProps extends PropertyControlProps {
  prop: ComponentControlBoolean;
}

export const BooleanEditor: PropertyEditor<BooleanEditorProps> = ({
  prop,
  name,
  onChange,
}) => (
  <FlexContainer>
    <Toggle
      id={name}
      onChange={checked => onChange(name, checked)}
      checked={prop.value}
    />
  </FlexContainer>
);
",
}
`;

exports[`follow-imports-custom ControlsTable 1`] = `
Object {
  "exportedAs": "ControlsTable",
  "filePath": "/Users/atanasster/component-controls/ui/blocks/src/ControlsTable/ControlsTable.tsx",
  "from": "./ControlsTable",
  "importedName": "ControlsTable",
  "loc": Object {
    "end": Object {
      "column": 1,
      "line": 127,
    },
    "start": Object {
      "column": 14,
      "line": 32,
    },
  },
  "originalFilePath": "/Users/atanasster/component-controls/ui/blocks/src/ControlsTable/ControlsTable.tsx",
  "source": "/** @jsx jsx */
import { jsx, Box } from 'theme-ui';
import React, { FC, MouseEvent } from 'react';
import { window, document } from 'global';
import qs from 'qs';
import copy from 'copy-to-clipboard';
import {
  resetControlValues,
  getControlValues,
  LoadedComponentControls,
  LoadedComponentControl,
  randomizeData,
} from '@component-controls/core';
import {
  BlockContainer,
  Tab,
  Tabs,
  TabList,
  TabPanel,
} from '@component-controls/components';
import { ControlsTableProps } from './ControlsTableProps';
import { SingleControlsTable } from './SingleControlsTable';

const DEFAULT_GROUP_ID = 'Other';

interface GroupedControlsType {
  [key: string]: LoadedComponentControls;
}

export const ControlsTable: FC<ControlsTableProps & {
  title?: string;
}> = props => {
  const [copied, setCopied] = React.useState(false);
  const { controls, title, storyId, setControlValue } = props;
  if (controls && Object.keys(controls).length) {
    const onReset = (e: MouseEvent<HTMLButtonElement>) => {
      e.preventDefault();
      if (setControlValue && storyId) {
        const values = resetControlValues(controls);
        setControlValue(storyId, undefined, values);
      }
    };
    const onCopy = (e: MouseEvent<HTMLButtonElement>) => {
      e.preventDefault();
      setCopied(true);
      const { location } = document;
      const query = qs.parse(location.search, { ignoreQueryPrefix: true });
      const values = getControlValues(controls);
      Object.keys(values).forEach(key => {
        query[\`controls-\${key}\`] = values[key];
      });

      copy(
        \`\${location.origin + location.pathname}?\${qs.stringify(query, {
          encode: false,
        })}\`,
      );
      window.setTimeout(() => setCopied(false), 1500);
    };
    const groupped: GroupedControlsType = Object.keys(controls)
      .filter(k => {
        const p: LoadedComponentControl = controls[k];
        return p.type && !p.hidden;
      })
      .reduce((acc: GroupedControlsType, k: string) => {
        const groupId = controls[k].groupId || DEFAULT_GROUP_ID;
        return { ...acc, [groupId]: { ...acc[groupId], [k]: controls[k] } };
      }, {});
    const groupedItems = Object.keys(groupped)
      .sort()
      .map(key => {
        return {
          label: key,
          controls: groupped[key],
        };
      });
    if (groupedItems.length === 0) {
      return null;
    }
    const actionItems = [
      { title: copied ? 'copied' : 'copy', onClick: onCopy },
      { title: 'reset', onClick: onReset },
      {
        title: 'randomize',
        onAction: (state: ControlsTableProps) => {
          if (state.setControlValue && state.controls && state.storyId) {
            state.setControlValue(
              state.storyId,
              undefined,
              randomizeData(state.controls),
            );
          }
        },
      },
    ];
    return (
      <BlockContainer actions={actionItems} title={title}>
        <Box
          sx={{
            pt: 4,
          }}
        >
          {groupedItems.length === 1 ? (
            <SingleControlsTable
              {...props}
              controls={groupedItems[0].controls}
            />
          ) : (
            <Tabs>
              <TabList>
                {groupedItems.map(item => (
                  <Tab key={\`tab_\${item.label}\`}>{item.label}</Tab>
                ))}
              </TabList>
              {groupedItems.map(item => (
                <TabPanel key={\`tab_panel_\${item.label}\`}>
                  <SingleControlsTable {...props} controls={item.controls} />
                </TabPanel>
              ))}
            </Tabs>
          )}
        </Box>
      </BlockContainer>
    );
  }
  return null;
};
",
}
`;

exports[`follow-imports-custom Markdown 1`] = `
Object {
  "exportedAs": "Markdown",
  "filePath": "/Users/atanasster/component-controls/ui/components/src/Markdown/Markdown.tsx",
  "from": "./Markdown",
  "importedName": "Markdown",
  "loc": Object {
    "end": Object {
      "column": 18,
      "line": 33,
    },
    "start": Object {
      "column": 2,
      "line": 26,
    },
  },
  "originalFilePath": "/Users/atanasster/component-controls/ui/components/src/Markdown/Markdown.tsx",
  "source": "/* eslint-disable react/display-name */
import React, { FC } from 'react';
import MarkdownToJSX, { MarkdownOptions } from 'markdown-to-jsx';
import { SyntaxHighlighter } from '../SyntaxHighlighter';

export interface MarkdownProps {
  /**
   * the markdown code is passed as a children prop
   */
  children: string;
  /**
   * components to customize the markdown display
   */
  components?: MarkdownOptions['overrides'];
}

const defaultComponents: MarkdownOptions['overrides'] = {
  code: SyntaxHighlighter,
};

/**
 * MDX display component that works at run time
 * uses \`markdown-to-jsx\` to compile MDX
 */
export const Markdown: FC<MarkdownProps> = ({ children, components }) => (
  <MarkdownToJSX
    options={{
      forceBlock: true,
      overrides: { ...defaultComponents, ...components },
    }}
  >
    {children}
  </MarkdownToJSX>
);
",
}
`;

exports[`follow-imports-custom Title 1`] = `
Object {
  "exportedAs": "Title",
  "filePath": "/Users/atanasster/component-controls/ui/blocks/src/Title/Title.tsx",
  "from": "./",
  "importedName": "Title",
  "loc": Object {
    "end": Object {
      "column": 1,
      "line": 23,
    },
    "start": Object {
      "column": 64,
      "line": 10,
    },
  },
  "originalFilePath": "/Users/atanasster/component-controls/ui/blocks/src/Title/Title.tsx",
  "source": "import React, { FC } from 'react';
import {
  Title as TitleBlock,
  TitleProps as TitlePropsBase,
} from '@component-controls/components';
import { useControlsContext, StoryInputProps } from '../BlocksContext';

export type TitleProps = StoryInputProps & TitlePropsBase;

export const Title: FC<TitleProps> = ({ id, name, ...rest }) => {
  const { component, kind } = useControlsContext({
    id,
    name,
  });
  let title;
  if (component && component.info && component.info.displayName) {
    title = component.info.displayName;
  } else if (kind) {
    const titleParts = kind.title.split('/');
    title = titleParts[titleParts.length - 1];
  }
  return title ? <TitleBlock {...rest}>{title}</TitleBlock> : null;
};
",
}
`;
