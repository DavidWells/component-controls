// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`follow-imports-custom BooleanEditor 1`] = `
Object {
  "exportedAs": "BooleanEditor",
  "filePath": "/Users/atanasster/component-controls/ui/editors/src/BooleanEditor/BooleanEditor.tsx",
  "from": "./BooleanEditor",
  "importedName": "BooleanEditor",
  "loc": Object {
    "end": Object {
      "column": 18,
      "line": 21,
    },
    "start": Object {
      "column": 2,
      "line": 15,
    },
  },
  "originalFilePath": "/Users/atanasster/component-controls/ui/editors/src/BooleanEditor/BooleanEditor.tsx",
  "source": "import React from 'react';
import { ComponentControlBoolean } from '@component-controls/specification';
import { Toggle, FlexContainer } from '@component-controls/components';
import { PropertyControlProps, PropertyEditor } from '../types';

export interface BooleanEditorProps extends PropertyControlProps {
  prop: ComponentControlBoolean;
}

export const BooleanEditor: PropertyEditor<BooleanEditorProps> = ({
  prop,
  name,
  onChange,
}) => (
  <FlexContainer>
    <Toggle
      id={name}
      onChange={checked => onChange(name, checked)}
      checked={prop.value}
    />
  </FlexContainer>
);
",
}
`;

exports[`follow-imports-custom Markdown 1`] = `
Object {
  "exportedAs": "Markdown",
  "filePath": "/Users/atanasster/component-controls/ui/components/src/Markdown/Markdown.tsx",
  "from": "./Markdown",
  "importedName": "Markdown",
  "loc": Object {
    "end": Object {
      "column": 18,
      "line": 33,
    },
    "start": Object {
      "column": 2,
      "line": 26,
    },
  },
  "originalFilePath": "/Users/atanasster/component-controls/ui/components/src/Markdown/Markdown.tsx",
  "source": "/* eslint-disable react/display-name */
import React, { FC } from 'react';
import MarkdownToJSX, { MarkdownOptions } from 'markdown-to-jsx';
import { SyntaxHighlighter } from '../SyntaxHighlighter';

export interface MarkdownProps {
  /**
   * the markdown code is passed as a children prop
   */
  children: string;
  /**
   * components to customize the markdown display
   */
  components?: MarkdownOptions['overrides'];
}

const defaultComponents: MarkdownOptions['overrides'] = {
  code: SyntaxHighlighter,
};

/**
 * MDX display component that works at run time
 * uses \`markdown-to-jsx\` to compile MDX
 */
export const Markdown: FC<MarkdownProps> = ({ children, components }) => (
  <MarkdownToJSX
    options={{
      forceBlock: true,
      overrides: { ...defaultComponents, ...components },
    }}
  >
    {children}
  </MarkdownToJSX>
);
",
}
`;

exports[`follow-imports-custom Title 1`] = `
Object {
  "exportedAs": "Title",
  "filePath": "/Users/atanasster/component-controls/ui/blocks/src/Title/Title.tsx",
  "from": "./",
  "importedName": "Title",
  "loc": Object {
    "end": Object {
      "column": 1,
      "line": 23,
    },
    "start": Object {
      "column": 64,
      "line": 10,
    },
  },
  "originalFilePath": "/Users/atanasster/component-controls/ui/blocks/src/Title/Title.tsx",
  "source": "import React, { FC } from 'react';
import {
  Title as TitleBlock,
  TitleProps as TitlePropsBase,
} from '@component-controls/components';
import { useControlsContext, StoryInputProps } from '../BlocksContext';

export type TitleProps = StoryInputProps & TitlePropsBase;

export const Title: FC<TitleProps> = ({ id, name, ...rest }) => {
  const { component, kind } = useControlsContext({
    id,
    name,
  });
  let title;
  if (component && component.info && component.info.displayName) {
    title = component.info.displayName;
  } else if (kind) {
    const titleParts = kind.title.split('/');
    title = titleParts[titleParts.length - 1];
  }
  return title ? <TitleBlock {...rest}>{title}</TitleBlock> : null;
};
",
}
`;
