// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`extract-component default-alias-import.js 1`] = `
Object {
  "from": "../components/button-default-class-export",
  "importedName": "namespace",
  "loc": Object {
    "end": Object {
      "column": 1,
      "line": 7,
    },
    "start": Object {
      "column": 37,
      "line": 3,
    },
  },
  "name": "Button",
  "repository": Object {
    "browse": "https://github.com/ccontrols/component-controls/tree/master/core/instrument/test/examples/components/button-default-class-export.js",
    "docs": "https://github.com/ccontrols/component-controls/tree/master#readme",
    "issues": "https://github.com/ccontrols/component-controls/issues",
  },
  "request": "/Users/atanasster/component-controls/core/instrument/test/examples/components/button-default-class-export.js",
  "source": "import React from 'react';

class Button extends React.Component {
  render() {
    return <button>Hello, {this.props.name}</button>;
  }
}

export default Button;
",
}
`;

exports[`extract-component default-import.js 1`] = `
Object {
  "from": "../components/button-default-arrow-func",
  "importedName": "default",
  "loc": Object {
    "end": Object {
      "column": 65,
      "line": 3,
    },
    "start": Object {
      "column": 24,
      "line": 3,
    },
  },
  "name": "Button",
  "repository": Object {
    "browse": "https://github.com/ccontrols/component-controls/tree/master/core/instrument/test/examples/components/button-default-arrow-func.js",
    "docs": "https://github.com/ccontrols/component-controls/tree/master#readme",
    "issues": "https://github.com/ccontrols/component-controls/issues",
  },
  "request": "/Users/atanasster/component-controls/core/instrument/test/examples/components/button-default-arrow-func.js",
  "source": "import React from 'react';

const Button = props => <button>{\`Hello, \${props.name}\`}</button>;

export default Button;
",
}
`;

exports[`extract-component kind-component.js 1`] = `
Object {
  "name": "Button",
}
`;

exports[`extract-component named-alias-import.js 1`] = `
Object {
  "from": "../components/button-named-arrow-func",
  "importedName": "Btn",
  "loc": undefined,
  "name": "Button",
  "repository": undefined,
  "request": undefined,
  "source": undefined,
}
`;

exports[`extract-component named-import.js 1`] = `
Object {
  "from": "../components/button-named-class",
  "importedName": "Button",
  "loc": Object {
    "end": Object {
      "column": 1,
      "line": 7,
    },
    "start": Object {
      "column": 44,
      "line": 3,
    },
  },
  "name": "Button",
  "repository": Object {
    "browse": "https://github.com/ccontrols/component-controls/tree/master/core/instrument/test/examples/components/button-named-class.js",
    "docs": "https://github.com/ccontrols/component-controls/tree/master#readme",
    "issues": "https://github.com/ccontrols/component-controls/issues",
  },
  "request": "/Users/atanasster/component-controls/core/instrument/test/examples/components/button-named-class.js",
  "source": "import React from 'react';

export class Button extends React.Component {
  render() {
    return <button>Hello, {this.props.name}</button>;
  }
}
",
}
`;

exports[`extract-component node-modules.js 1`] = `
Object {
  "from": "theme-ui",
  "importedName": "Button",
  "loc": Object {
    "end": Object {
      "column": 2,
      "line": 26,
    },
    "start": Object {
      "column": 22,
      "line": 4,
    },
  },
  "name": "Button",
  "repository": Object {
    "browse": "https://github.com/system-ui/theme-ui/tree/master/dist/index.js",
    "docs": "https://github.com/system-ui/theme-ui/tree/master#readme",
    "issues": "https://github.com/system-ui/theme-ui/issues",
  },
  "request": "/Users/atanasster/component-controls/node_modules/@theme-ui/components/src/Button.js",
  "source": "import React from 'react'
import Box from './Box'

export const Button = React.forwardRef((props, ref) => (
  <Box
    ref={ref}
    as=\\"button\\"
    variant=\\"primary\\"
    {...props}
    __themeKey=\\"buttons\\"
    __css={{
      appearance: 'none',
      display: 'inline-block',
      textAlign: 'center',
      lineHeight: 'inherit',
      textDecoration: 'none',
      fontSize: 'inherit',
      px: 3,
      py: 2,
      color: 'white',
      bg: 'primary',
      border: 0,
      borderRadius: 4,
    }}
  />
))
",
}
`;

exports[`extract-component node-modules-source.js 1`] = `
Object {
  "from": "@component-controls/components",
  "importedName": "Subtitle",
  "loc": Object {
    "end": Object {
      "column": 1,
      "line": 80,
    },
    "start": Object {
      "column": 23,
      "line": 67,
    },
  },
  "name": "Button",
  "repository": Object {
    "browse": "https://github.com/ccontrols/component-controls/tree/master/ui/components/dist/index.js",
    "docs": "https://github.com/ccontrols/component-controls/tree/master#readme",
    "issues": "https://github.com/ccontrols/component-controls/issues",
  },
  "request": "/Users/atanasster/component-controls/node_modules/@component-controls/components/dist/index.js",
  "source": "'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var styled = _interopDefault(require('@emotion/styled'));
var themeUi = require('theme-ui');
var React = _interopDefault(require('react'));
var Octicon = require('@primer/octicons-react');
var Octicon__default = _interopDefault(Octicon);
var tslib = require('tslib');
var AnimateHeight = _interopDefault(require('react-animate-height'));
var MarkdownToJSX = _interopDefault(require('markdown-to-jsx'));
var Highlight = require('prism-react-renderer');
var Highlight__default = _interopDefault(Highlight);
var duotoneDark = _interopDefault(require('prism-react-renderer/themes/duotoneDark'));
var duotoneLight = _interopDefault(require('prism-react-renderer/themes/duotoneLight'));
var TooltipTrigger = _interopDefault(require('react-popper-tooltip'));
var copy = _interopDefault(require('copy-to-clipboard'));
var reactTabs = require('react-tabs');
var presets = require('@theme-ui/presets');
var polished = require('polished');

const StyledContainer = styled.div\`
  position: relative;
\`;
const StyledFlex = styled.div\`
  display: flex;
  position: absolute;
  flex-direction: row-reverse;
  width: 100%;
\`;

const ActionColors = disabled => ({
  backgroundColor: 'highlight',
  color: disabled ? '#ddd' : 'background',
  cursor: disabled ? 'not-allowed' : undefined,
  px: 2,
  py: 1,
  lineHeight: 1,
  borderRadius: 0,
  border: 'none'
});

const ActionBar = ({
  actionItems
}) => themeUi.jsx(StyledContainer, null, themeUi.jsx(StyledFlex, null, actionItems.filter(({
  hidden
}) => !hidden).map(({
  title,
  onClick,
  disabled
}, index) => themeUi.jsx(themeUi.Box, {
  key: \`\${typeof title === 'string' ? title : 'item'}_\${index}\`,
  sx: {
    ml: 1,
    fontSize: 1,
    a: ActionColors(disabled),
    button: ActionColors(disabled)
  }
}, typeof title === 'string' ? themeUi.jsx(themeUi.Button, {
  onClick: onClick,
  disabled: disabled
}, title) : title))));

const Subtitle = _a => {
  var {
    children
  } = _a,
      rest = tslib.__rest(_a, [\\"children\\"]);

  return React.createElement(themeUi.Heading, Object.assign({
    as: \\"h3\\",
    color: \\"fadedText\\",
    css: {
      fontWeight: 400
    }
  }, rest), children);
};

const Collapsible = _a => {
  var {
    children,
    isOpen
  } = _a,
      rest = tslib.__rest(_a, [\\"children\\", \\"isOpen\\"]);

  return React.createElement(AnimateHeight, Object.assign({}, rest, {
    height: isOpen ? 'auto' : 0
  }), children);
};

/** @jsx jsx */
const SpacedBlockContainer = styled.div(() => ({
  position: 'relative',
  margin: '25px 0 40px 0'
}));
const FramedBlockContainer = styled.div(() => ({
  boxSadow: 'rgba(0, 0, 0, 0.1) 0px 1px 3px 0px',
  borderRadius: 4,
  border: '1px solid rgba(0, 0, 0, 0.1)'
}));
const BlockContainer = ({
  children,
  title,
  actions
}) => {
  const [isOpen, setIsOpen] = React.useState(true);
  const id = title ? title.toLowerCase().replace(/\\\\s/g, '-') : undefined; //workaround for storybook iframe url

  const url = (window.location != window.parent.location ? document.referrer : document.location.href) || '';
  return themeUi.jsx(SpacedBlockContainer, {
    id: id
  }, themeUi.jsx(themeUi.Flex, {
    sx: {
      flexDirection: 'row',
      alignItems: 'center',
      pb: 2,
      ':hover': {
        a: {
          visibility: 'visible'
        }
      }
    }
  }, id && themeUi.jsx(themeUi.Link, {
    sx: {
      position: 'absolute',
      left: -4,
      px: 2,
      visibility: 'hidden',
      ':hover': {
        visibility: 'visible'
      }
    },
    href: \`\${url.split('#')[0]}#\${id}\`
  }, themeUi.jsx(Octicon__default, {
    icon: Octicon.Link
  })), title && themeUi.jsx(Subtitle, {
    css: {
      paddingRight: 10
    }
  }, title), themeUi.jsx(themeUi.Link, {
    \\"aria-label\\": isOpen ? 'Collapse this block' : 'Expand this block',
    css: {
      cursor: 'pointer'
    },
    onClick: () => setIsOpen(!isOpen)
  }, themeUi.jsx(Octicon__default, {
    icon: isOpen ? Octicon.ChevronDown : Octicon.ChevronRight
  }))), themeUi.jsx(Collapsible, {
    isOpen: isOpen
  }, actions && themeUi.jsx(ActionBar, {
    actionItems: actions
  }), themeUi.jsx(FramedBlockContainer, null, children)), !isOpen && themeUi.jsx(themeUi.Divider, null));
};

const ExternalLink = props => React.createElement(themeUi.Link, Object.assign({}, props, {
  target: \\"_blank\\",
  rel: \\"noopener noreferrer\\"
}));

const FlexContainer = ({
  align = 'center',
  children
}) => React.createElement(themeUi.Flex, {
  css: {
    alignItems: align,
    justifyContent: align,
    flexDirection: 'column',
    flexBasis: '100%'
  }
}, children);

/** @jsx jsx */
/**
 * Syntax highlighter component
 */

const SyntaxHighlighter = ({
  children = '',
  language = 'jsx',
  theme: customTheme,
  renderFn,
  dark = false,
  style: propStyle,
  as = 'span'
}) => {
  if (typeof children !== 'string') {
    console.error('Invalid children roperty passed to Source: must be a string');
  }

  const theme = customTheme ? customTheme : dark ? duotoneDark : duotoneLight;
  const renderProps = typeof renderFn === 'function' ? props => renderFn(props, {
    theme
  }) : ({
    className,
    style,
    tokens,
    getLineProps,
    getTokenProps
  }) => themeUi.jsx(themeUi.Styled.pre, {
    className: \`\${className}\`,
    style: Object.assign(Object.assign(Object.assign({}, style), {
      padding: '3px 5px',
      display: 'inline',
      margin: 0
    }), propStyle)
  }, tokens.map((line, i) => themeUi.jsx(themeUi.Box, Object.assign({
    as: as
  }, getLineProps({
    line,
    key: i
  })), line.map((token, key) => themeUi.jsx(\\"span\\", Object.assign({}, getTokenProps({
    token,
    key
  }), {
    sx: {
      display: 'inline-block'
    }
  }))))));
  const props = Object.assign(Object.assign({}, Highlight.defaultProps), {
    theme
  });
  return themeUi.jsx(Highlight__default, Object.assign({}, props, {
    code: children,
    language: language
  }), renderProps);
};

/* eslint-disable react/display-name */
const defaultComponents = {
  code: SyntaxHighlighter
};
/**
 * MDX display component that works at run time
 * uses \`markdown-to-jsx\` to compile MDX
 */

const Markdown = ({
  children,
  components
}) => React.createElement(MarkdownToJSX, {
  options: {
    forceBlock: true,
    overrides: Object.assign(Object.assign({}, defaultComponents), components)
  }
}, children);

const SPACING = 8;

const match = (requested, actual, value, fallback = 0) => actual.split('-')[0] === requested ? value : fallback;

const Wrapper = styled.div(({
  placement,
  borderColor,
  hidden
}) => ({
  display: hidden ? 'none' : 'inline-block',
  background: 'white',
  marginTop: \`\${match('bottom', placement, SPACING + 2, 0)}px\`,
  marginLeft: \`\${match('right', placement, SPACING + 2, 0)}px\`,
  marginRight: \`\${match('left', placement, SPACING + 2, 0)}px\`,
  filter: \`
  drop-shadow(0px 5px 5px rgba(0,0,0,0.05))
  drop-shadow(0 1px 3px rgba(0,0,0,0.1))
\`,
  borderRadius: 8,
  fontSize: 12,
  border: \`1px solid \${borderColor}\`
}));
const Arrow = styled.div(({
  placement,
  borderColor
}) => ({
  position: 'absolute',
  borderStyle: 'solid',
  background: 'white',
  marginBottom: \`\${match('top', placement, '0', SPACING)}px\`,
  marginTop: \`\${match('bottom', placement, '0', SPACING)}px\`,
  marginRight: \`\${match('left', placement, '0', SPACING)}px\`,
  marginLeft: \`\${match('right', placement, '0', SPACING)}px\`,
  bottom: \`\${match('top', placement, SPACING * -1, 'auto')}px\`,
  top: \`\${match('bottom', placement, SPACING * -1, 'auto')}px\`,
  right: \`\${match('left', placement, SPACING * -1, 'auto')}px\`,
  left: \`\${match('right', placement, SPACING * -1, 'auto')}px\`,
  borderBottomWidth: \`\${match('top', placement, '0', SPACING)}px\`,
  borderTopWidth: \`\${match('bottom', placement, '0', SPACING)}px\`,
  borderRightWidth: \`\${match('left', placement, '0', SPACING)}px\`,
  borderLeftWidth: \`\${match('right', placement, '0', SPACING)}px\`,
  borderTopColor: match('top', placement, borderColor, 'transparent'),
  borderBottomColor: match('bottom', placement, borderColor, 'transparent'),
  borderLeftColor: match('left', placement, borderColor, 'transparent'),
  borderRightColor: match('right', placement, borderColor, 'transparent')
}));
const Popover = _a => {
  var {
    trigger,
    placement = 'bottom',
    modifiers,
    tooltip,
    children,
    tooltipShown,
    onVisibilityChange
  } = _a,
      props = tslib.__rest(_a, [\\"trigger\\", \\"placement\\", \\"modifiers\\", \\"tooltip\\", \\"children\\", \\"tooltipShown\\", \\"onVisibilityChange\\"]);

  const borderColor = 'lightgrey';
  return React.createElement(TooltipTrigger, {
    placement: placement,
    trigger: trigger,
    modifiers: modifiers,
    tooltipShown: tooltipShown,
    onVisibilityChange: onVisibilityChange,
    tooltip: tooltipProps => {
      const {
        getTooltipProps,
        getArrowProps,
        tooltipRef,
        arrowRef
      } = tooltipProps;

      const _a = getTooltipProps(),
            {
        hidden
      } = _a,
            containerProps = tslib.__rest(_a, [\\"hidden\\"]);

      return React.createElement(Wrapper, Object.assign({
        placement: placement,
        borderColor: borderColor,
        hidden: hidden,
        ref: tooltipRef
      }, containerProps), React.createElement(Arrow, Object.assign({
        placement: placement,
        borderColor: borderColor,
        ref: arrowRef
      }, getArrowProps())), typeof tooltip === 'function' ? tooltip(tooltipProps) : tooltip);
    }
  }, ({
    getTriggerProps,
    triggerRef
  }) => React.createElement(themeUi.Box, Object.assign({
    ref: triggerRef
  }, getTriggerProps(), props, {
    css: {
      display: 'inline-block'
    }
  }), children));
};

/**
 * Source component used to display source code
 *
 */

const Source = _a => {
  var {
    children = '',
    actions,
    title,
    as = 'div'
  } = _a,
      props = tslib.__rest(_a, [\\"children\\", \\"actions\\", \\"title\\", \\"as\\"]);

  const [copied, setCopied] = React.useState(false);

  const onCopy = e => {
    e.preventDefault();
    setCopied(true);
    copy(children);
    window.setTimeout(() => setCopied(false), 1500);
  };

  const actionsItems = Array.isArray(actions) ? [...actions] : [];
  actionsItems.push({
    title: copied ? 'copied' : 'copy',
    onClick: onCopy
  });
  return themeUi.jsx(BlockContainer, {
    actions: actionsItems,
    title: title
  }, themeUi.jsx(SyntaxHighlighter, Object.assign({
    as: as
  }, props, {
    style: {
      padding: '16px 10px 10px',
      display: 'block'
    }
  }), children));
};

const TabsContainer = styled.div\`
  \${({
  theme
}) => {
  var _a, _b, _c;

  return \`
    .react-tabs {
      -webkit-tap-highlight-color: transparent;
    }
    .react-tabs__tab-list {
      margin: 0 0 10px;
      padding: 0;
    }
    .react-tabs__tab {
      font-size: 13px;
      font-weight: bold;
      display: inline-block;
      border-bottom: none;
      bottom: -1px;
      position: relative;
      list-style: none;
      padding: 4px 15px;
      cursor: pointer;
      color: \${(_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.fadedText};
    }
    .react-tabs__tab--selected {
      border-bottom: 3px solid \${(_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.accent};
      color: \${(_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.accent};
    }
    .react-tabs__tab--disabled {
      color: GrayText;
      cursor: default;
    }
    .react-tabs__tab:focus {
      box-shadow: 0 0 5px hsl(208, 99%, 50%);
      border-color: hsl(208, 99%, 50%);
      outline: none;
    }
    .react-tabs__tab:focus:after {
      content: \\"\\";
      position: absolute;
      height: 5px;
      left: -4px;
      right: -4px;
      bottom: -5px;
      background: #fff;
    }
    .react-tabs__tab-panel {
      display: none;
    }
    .react-tabs__tab-panel.react-tabs__tab-panel--selected {
      display: block;
    }
  \`;
}}
\`;

const Tabs = props => React.createElement(TabsContainer, null, React.createElement(reactTabs.Tabs, Object.assign({}, props)));

const ThemeContext = React.createContext({});
const ThemeProvider = ({
  children,
  dark
}) => {
  const theme = Object.assign(Object.assign({}, presets.polaris), {
    styles: Object.assign(Object.assign({}, presets.polaris.styles), {
      table: {
        margin: 0,
        borderCollapse: 'collapse',
        fontSize: '14px',
        lineHeight: '20px',
        textAlign: 'left',
        width: '100%',
        borderSpacing: '0px'
      },
      td: {
        padding: '16px 20px'
      },
      tr: {
        borderBottom: '1px solid rgba(0, 0, 0, 0.1)'
      }
    }),
    buttons: {
      primary: {
        color: '#333',
        bg: '#f3f3f3',
        borderRadius: 5,
        boxShadow: 'rgba(0, 0, 0, 0.1) 0px 0px 0px 1px inset'
      },
      secondary: {
        bg: 'highlight'
      }
    },
    colors: Object.assign(Object.assign({}, presets.polaris.colors), {
      highlight: '#339793',
      accent: '#1EA7FD',
      fadedText: polished.lighten(0.25, presets.polaris.colors.text),
      lightenPrimary: '#F6F9FC'
    })
  });
  return React.createElement(ThemeContext.Provider, {
    value: {
      theme,
      dark
    }
  }, React.createElement(themeUi.ThemeProvider, {
    theme: theme
  }, children));
};

const StyledHeading = styled(themeUi.Heading)(() => ({
  fontWeight: 900,
  paddingBottom: '25px'
}));
const Title = _a => {
  var {
    children
  } = _a,
      rest = tslib.__rest(_a, [\\"children\\"]);

  return React.createElement(StyledHeading, Object.assign({
    as: \\"h1\\"
  }, rest), children);
};

const Toggle = _a => {
  var {
    checked = false,
    onChange,
    labels = {
      true: 'True',
      false: 'False'
    }
  } = _a,
      rest = tslib.__rest(_a, [\\"checked\\", \\"onChange\\", \\"labels\\"]);

  return themeUi.jsx(themeUi.Box, Object.assign({}, rest), themeUi.jsx(themeUi.Label, {
    sx: {
      display: 'flex',
      flexDirection: 'row',
      alignItems: 'center'
    }
  }, themeUi.jsx(themeUi.Text, {
    sx: {
      paddingRight: 1
    }
  }, checked ? labels.true : labels.false), themeUi.jsx(themeUi.Checkbox, {
    checked: checked,
    onClick: () => onChange && onChange(!checked)
  })));
};
Toggle.displayName = 'Toggle';

Object.defineProperty(exports, 'Tab', {
  enumerable: true,
  get: function () {
    return reactTabs.Tab;
  }
});
Object.defineProperty(exports, 'TabList', {
  enumerable: true,
  get: function () {
    return reactTabs.TabList;
  }
});
Object.defineProperty(exports, 'TabPanel', {
  enumerable: true,
  get: function () {
    return reactTabs.TabPanel;
  }
});
exports.ActionBar = ActionBar;
exports.Arrow = Arrow;
exports.BlockContainer = BlockContainer;
exports.Collapsible = Collapsible;
exports.ExternalLink = ExternalLink;
exports.FlexContainer = FlexContainer;
exports.Markdown = Markdown;
exports.Popover = Popover;
exports.Source = Source;
exports.Subtitle = Subtitle;
exports.Tabs = Tabs;
exports.ThemeContext = ThemeContext;
exports.ThemeProvider = ThemeProvider;
exports.Title = Title;
exports.Toggle = Toggle;
exports.Wrapper = Wrapper;
",
}
`;

exports[`extract-component non-existing-file.js 1`] = `
Object {
  "from": "./Button",
  "importedName": "Btn",
  "loc": undefined,
  "name": "Button",
  "repository": undefined,
  "request": undefined,
  "source": undefined,
}
`;

exports[`extract-component parameters-component.js 1`] = `
Object {
  "from": "../components/button-named-arrow-func",
  "importedName": "Button",
  "loc": Object {
    "end": Object {
      "column": 72,
      "line": 3,
    },
    "start": Object {
      "column": 31,
      "line": 3,
    },
  },
  "name": "Button",
  "repository": Object {
    "browse": "https://github.com/ccontrols/component-controls/tree/master/core/instrument/test/examples/components/button-named-arrow-func.js",
    "docs": "https://github.com/ccontrols/component-controls/tree/master#readme",
    "issues": "https://github.com/ccontrols/component-controls/issues",
  },
  "request": "/Users/atanasster/component-controls/core/instrument/test/examples/components/button-named-arrow-func.js",
  "source": "import React from 'react';

export const Button = props => <button>{\`Hello, \${props.name}\`}</button>;
",
}
`;

exports[`extract-component story-component.js 1`] = `
Object {
  "from": "../components/button-named-class",
  "importedName": "Button",
  "loc": Object {
    "end": Object {
      "column": 1,
      "line": 7,
    },
    "start": Object {
      "column": 44,
      "line": 3,
    },
  },
  "name": "Button",
  "repository": Object {
    "browse": "https://github.com/ccontrols/component-controls/tree/master/core/instrument/test/examples/components/button-named-class.js",
    "docs": "https://github.com/ccontrols/component-controls/tree/master#readme",
    "issues": "https://github.com/ccontrols/component-controls/issues",
  },
  "request": "/Users/atanasster/component-controls/core/instrument/test/examples/components/button-named-class.js",
  "source": "import React from 'react';

export class Button extends React.Component {
  render() {
    return <button>Hello, {this.props.name}</button>;
  }
}
",
}
`;
