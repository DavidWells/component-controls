// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`csf-props-info resolve-node-modules.jsx 1`] = `
Object {
  "components": Object {
    "26090286b0d42fa7a92590e6843f1687": Object {
      "from": "@component-controls/blocks",
      "importedName": "PropsTable",
      "imports": Object {
        "@component-controls/components": Array [
          Object {
            "importedName": "TableProps",
            "name": "TableProps",
          },
        ],
        "react": Array [
          Object {
            "importedName": "FC",
            "name": "FC",
          },
        ],
        "react-table": Array [
          Object {
            "importedName": "Column",
            "name": "Column",
          },
        ],
        "theme-ui": Array [
          Object {
            "importedName": "jsx",
            "name": "jsx",
          },
        ],
      },
      "info": Object {
        "description": "",
        "displayName": "PropsTable",
        "methods": Array [],
        "props": Object {
          "about": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "accessKey": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-activedescendant": Object {
            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-atomic": Object {
            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-autocomplete": Object {
            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "enum",
              "raw": "\\"none\\" | \\"inline\\" | \\"list\\" | \\"both\\"",
              "value": Array [
                Object {
                  "name": "string",
                  "value": "none",
                },
                Object {
                  "name": "string",
                  "value": "inline",
                },
                Object {
                  "name": "string",
                  "value": "list",
                },
                Object {
                  "name": "string",
                  "value": "both",
                },
              ],
            },
          },
          "aria-busy": Object {
            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-checked": Object {
            "description": "Indicates the current \\"checked\\" state of checkboxes, radio buttons, and other widgets.
@see aria-pressed
@see aria-selected.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "union",
              "raw": "boolean | \\"true\\" | \\"false\\" | \\"mixed\\"",
              "value": Array [
                Object {
                  "name": "boolean",
                },
                Object {
                  "name": "true",
                },
                Object {
                  "name": "false",
                },
                Object {
                  "name": "mixed",
                },
              ],
            },
          },
          "aria-colcount": Object {
            "description": "Defines the total number of columns in a table, grid, or treegrid.
@see aria-colindex.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-colindex": Object {
            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
@see aria-colcount
@see aria-colspan.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-colspan": Object {
            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-colindex
@see aria-rowspan.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-controls": Object {
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.
@see aria-owns.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-current": Object {
            "description": "Indicates the element that represents the current item within a container or set of related elements.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "union",
              "raw": "boolean | \\"time\\" | \\"true\\" | \\"false\\" | \\"page\\" | \\"step\\" | \\"location\\" | \\"date\\"",
              "value": Array [
                Object {
                  "name": "boolean",
                },
                Object {
                  "name": "time",
                },
                Object {
                  "name": "true",
                },
                Object {
                  "name": "false",
                },
                Object {
                  "name": "page",
                },
                Object {
                  "name": "step",
                },
                Object {
                  "name": "location",
                },
                Object {
                  "name": "date",
                },
              ],
            },
          },
          "aria-describedby": Object {
            "description": "Identifies the element (or elements) that describes the object.
@see aria-labelledby",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-details": Object {
            "description": "Identifies the element that provides a detailed, extended description for the object.
@see aria-describedby.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-disabled": Object {
            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
@see aria-hidden
@see aria-readonly.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-dropeffect": Object {
            "description": "Indicates what functions can be performed when a dragged object is released on the drop target.
@deprecated in ARIA 1.1",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "enum",
              "raw": "\\"link\\" | \\"none\\" | \\"copy\\" | \\"execute\\" | \\"move\\" | \\"popup\\"",
              "value": Array [
                Object {
                  "name": "string",
                  "value": "link",
                },
                Object {
                  "name": "string",
                  "value": "none",
                },
                Object {
                  "name": "string",
                  "value": "copy",
                },
                Object {
                  "name": "string",
                  "value": "execute",
                },
                Object {
                  "name": "string",
                  "value": "move",
                },
                Object {
                  "name": "string",
                  "value": "popup",
                },
              ],
            },
          },
          "aria-errormessage": Object {
            "description": "Identifies the element that provides an error message for the object.
@see aria-invalid
@see aria-describedby.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-expanded": Object {
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-flowto": Object {
            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
allows assistive technology to override the general default of reading in document source order.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-grabbed": Object {
            "description": "Indicates an element's \\"grabbed\\" state in a drag-and-drop operation.
@deprecated in ARIA 1.1",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-haspopup": Object {
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "union",
              "raw": "boolean | \\"dialog\\" | \\"menu\\" | \\"grid\\" | \\"true\\" | \\"false\\" | \\"listbox\\" | \\"tree\\"",
              "value": Array [
                Object {
                  "name": "boolean",
                },
                Object {
                  "name": "dialog",
                },
                Object {
                  "name": "menu",
                },
                Object {
                  "name": "grid",
                },
                Object {
                  "name": "true",
                },
                Object {
                  "name": "false",
                },
                Object {
                  "name": "listbox",
                },
                Object {
                  "name": "tree",
                },
              ],
            },
          },
          "aria-hidden": Object {
            "description": "Indicates whether the element is exposed to an accessibility API.
@see aria-disabled.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-invalid": Object {
            "description": "Indicates the entered value does not conform to the format expected by the application.
@see aria-errormessage.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "union",
              "raw": "boolean | \\"true\\" | \\"false\\" | \\"grammar\\" | \\"spelling\\"",
              "value": Array [
                Object {
                  "name": "boolean",
                },
                Object {
                  "name": "true",
                },
                Object {
                  "name": "false",
                },
                Object {
                  "name": "grammar",
                },
                Object {
                  "name": "spelling",
                },
              ],
            },
          },
          "aria-keyshortcuts": Object {
            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-label": Object {
            "description": "Defines a string value that labels the current element.
@see aria-labelledby.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-labelledby": Object {
            "description": "Identifies the element (or elements) that labels the current element.
@see aria-describedby.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-level": Object {
            "description": "Defines the hierarchical level of an element within a structure.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-live": Object {
            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "enum",
              "raw": "\\"off\\" | \\"assertive\\" | \\"polite\\"",
              "value": Array [
                Object {
                  "name": "string",
                  "value": "off",
                },
                Object {
                  "name": "string",
                  "value": "assertive",
                },
                Object {
                  "name": "string",
                  "value": "polite",
                },
              ],
            },
          },
          "aria-modal": Object {
            "description": "Indicates whether an element is modal when displayed.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-multiline": Object {
            "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-multiselectable": Object {
            "description": "Indicates that the user may select more than one item from the current selectable descendants.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-orientation": Object {
            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "enum",
              "raw": "\\"horizontal\\" | \\"vertical\\"",
              "value": Array [
                Object {
                  "name": "string",
                  "value": "horizontal",
                },
                Object {
                  "name": "string",
                  "value": "vertical",
                },
              ],
            },
          },
          "aria-owns": Object {
            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
@see aria-controls.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-placeholder": Object {
            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
A hint could be a sample value or a brief description of the expected format.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-posinset": Object {
            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-setsize.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-pressed": Object {
            "description": "Indicates the current \\"pressed\\" state of toggle buttons.
@see aria-checked
@see aria-selected.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "union",
              "raw": "boolean | \\"true\\" | \\"false\\" | \\"mixed\\"",
              "value": Array [
                Object {
                  "name": "boolean",
                },
                Object {
                  "name": "true",
                },
                Object {
                  "name": "false",
                },
                Object {
                  "name": "mixed",
                },
              ],
            },
          },
          "aria-readonly": Object {
            "description": "Indicates that the element is not editable, but is otherwise operable.
@see aria-disabled.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-relevant": Object {
            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
@see aria-atomic.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "enum",
              "raw": "\\"text\\" | \\"all\\" | \\"additions\\" | \\"additions text\\" | \\"removals\\"",
              "value": Array [
                Object {
                  "name": "string",
                  "value": "text",
                },
                Object {
                  "name": "string",
                  "value": "all",
                },
                Object {
                  "name": "string",
                  "value": "additions",
                },
                Object {
                  "name": "string",
                  "value": "additions text",
                },
                Object {
                  "name": "string",
                  "value": "removals",
                },
              ],
            },
          },
          "aria-required": Object {
            "description": "Indicates that user input is required on the element before a form may be submitted.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-roledescription": Object {
            "description": "Defines a human-readable, author-localized description for the role of an element.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "aria-rowcount": Object {
            "description": "Defines the total number of rows in a table, grid, or treegrid.
@see aria-rowindex.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-rowindex": Object {
            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
@see aria-rowcount
@see aria-rowspan.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-rowspan": Object {
            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
@see aria-rowindex
@see aria-colspan.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-selected": Object {
            "description": "Indicates the current \\"selected\\" state of various widgets.
@see aria-checked
@see aria-pressed.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "aria-setsize": Object {
            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
@see aria-posinset.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-sort": Object {
            "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "enum",
              "raw": "\\"none\\" | \\"ascending\\" | \\"descending\\" | \\"other\\"",
              "value": Array [
                Object {
                  "name": "string",
                  "value": "none",
                },
                Object {
                  "name": "string",
                  "value": "ascending",
                },
                Object {
                  "name": "string",
                  "value": "descending",
                },
                Object {
                  "name": "string",
                  "value": "other",
                },
              ],
            },
          },
          "aria-valuemax": Object {
            "description": "Defines the maximum allowed value for a range widget.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-valuemin": Object {
            "description": "Defines the minimum allowed value for a range widget.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-valuenow": Object {
            "description": "Defines the current value for a range widget.
@see aria-valuetext.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "aria-valuetext": Object {
            "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
            "parentName": "AriaAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "as": Object {
            "parentName": "BoxOwnProps",
            "type": Object {
              "name": "ElementType<any>",
              "raw": "ElementType<any>",
            },
          },
          "autoCapitalize": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "autoCorrect": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "autoSave": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "backgroundColor": Object {
            "parentName": "BackgroundColorProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "bg": Object {
            "description": "The color utility parses a component's \`color\` and \`bg\` props and converts them into CSS declarations.
By default the raw value of the prop is returned.

Color palettes can be configured with the ThemeProvider to use keys as prop values, with support for dot notation.
Array values are converted into responsive values.

[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)",
            "parentName": "BackgroundColorProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "className": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "collapsible": Object {
            "description": "if false, will nothave a collapsible frame.",
            "parentName": "BlockContainerProps",
            "type": Object {
              "name": "boolean",
              "raw": "boolean",
            },
          },
          "color": Object {
            "description": "The color utility parses a component's \`color\` and \`bg\` props and converts them into CSS declarations.
By default the raw value of the prop is returned.

Color palettes can be configured with the ThemeProvider to use keys as prop values, with support for dot notation.
Array values are converted into responsive values.

[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/color)",
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "contentEditable": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "union",
              "raw": "boolean | \\"inherit\\" | \\"true\\" | \\"false\\"",
              "value": Array [
                Object {
                  "name": "boolean",
                },
                Object {
                  "name": "inherit",
                },
                Object {
                  "name": "true",
                },
                Object {
                  "name": "false",
                },
              ],
            },
          },
          "contextMenu": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "css": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "InterpolationWithTheme<any>",
              "raw": "InterpolationWithTheme<any>",
            },
          },
          "dangerouslySetInnerHTML": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "object",
              "raw": "{ __html: string; }",
            },
          },
          "datatype": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "defaultChecked": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "boolean",
              "raw": "boolean",
            },
          },
          "defaultValue": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "array",
              "raw": "string | number | string[]",
              "value": Array [
                Object {
                  "name": "string | number | string",
                },
              ],
            },
          },
          "description": Object {
            "description": "optional markdown description.",
            "parentName": "BlockContainerProps",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "dir": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "draggable": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "expanded": Object {
            "description": "object listing the initially expanded rows.",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "object",
              "raw": "{ [key: string]: boolean; }",
            },
          },
          "extraColumns": Object {
            "defaultValue": "[]",
            "description": "extra custom columns passed to the PropsTable.",
            "parentName": "PropsTableOwnProps",
            "type": Object {
              "name": "array",
              "raw": "Column<{}>[]",
              "value": Array [
                Object {
                  "name": "Column<{}>",
                },
              ],
            },
          },
          "filtering": Object {
            "description": "enable/disable filtering.",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "boolean",
              "raw": "boolean",
            },
          },
          "groupBy": Object {
            "description": "field to be grouped by.",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "array",
              "raw": "string[]",
              "value": Array [
                Object {
                  "name": "string",
                },
              ],
            },
          },
          "header": Object {
            "description": "show or hide the header element.",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "boolean",
              "raw": "boolean",
            },
          },
          "hidden": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "boolean",
              "raw": "boolean",
            },
          },
          "hiddenColumns": Object {
            "description": "list of columns to hide.",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "array",
              "raw": "string[]",
              "value": Array [
                Object {
                  "name": "string",
                },
              ],
            },
          },
          "id": Object {
            "description": "optional id to be used for the block
if no id is provided, one will be calculated automatically
from the title.",
            "parentName": "BlockContainerProps",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "initialSelected": Object {
            "description": "initially selected rows",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "Record<number, boolean>",
              "raw": "Record<number, boolean>",
            },
          },
          "inlist": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "any",
              "raw": "any",
            },
          },
          "inputMode": Object {
            "description": "Hints at the type of data that might be entered by the user while editing the element or its contents
@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "enum",
              "raw": "\\"text\\" | \\"none\\" | \\"tel\\" | \\"url\\" | \\"email\\" | \\"numeric\\" | \\"decimal\\" | \\"search\\"",
              "value": Array [
                Object {
                  "name": "string",
                  "value": "text",
                },
                Object {
                  "name": "string",
                  "value": "none",
                },
                Object {
                  "name": "string",
                  "value": "tel",
                },
                Object {
                  "name": "string",
                  "value": "url",
                },
                Object {
                  "name": "string",
                  "value": "email",
                },
                Object {
                  "name": "string",
                  "value": "numeric",
                },
                Object {
                  "name": "string",
                  "value": "decimal",
                },
                Object {
                  "name": "string",
                  "value": "search",
                },
              ],
            },
          },
          "is": Object {
            "description": "Specify that a standard HTML element should behave like a defined custom built-in element
@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "itemID": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "itemProp": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "itemRef": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "itemScope": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "boolean",
              "raw": "boolean",
            },
          },
          "itemType": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "itemsLabel": Object {
            "description": "string label for 'items' - used in the filter placeholder and grouping header.",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "key": Object {
            "parentName": "Attributes",
            "type": Object {
              "name": "TLengthStyledSystem",
              "raw": "TLengthStyledSystem",
            },
          },
          "lang": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "m": Object {
            "description": "Margin on top, left, bottom and right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "margin": Object {
            "description": "Margin on top, left, bottom and right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "marginBottom": Object {
            "description": "Margin on bottom",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "marginLeft": Object {
            "description": "Margin on left",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "marginRight": Object {
            "description": "Margin on right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "marginTop": Object {
            "description": "Margin on top",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "marginX": Object {
            "description": "Margin on left and right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "marginY": Object {
            "description": "Margin on top and bottom",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "mb": Object {
            "description": "Margin on bottom",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "ml": Object {
            "description": "Margin on left",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "mr": Object {
            "description": "Margin on right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "mt": Object {
            "description": "Margin on top",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "mx": Object {
            "description": "Margin on left and right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "my": Object {
            "description": "Margin on top and bottom",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "of": Object {
            "description": "Specify the component(s), for which to have information displayed.
The default, a value of \`\\".\\"\` will indicate to display information for the current component (associated with the current Story).
If an array of components is specified, each component will be displayed in a separate tab.",
            "parentName": "ComponentInputProps",
            "type": Object {
              "name": "any",
              "raw": "any",
            },
          },
          "onAbort": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onAbortCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onAnimationEnd": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: AnimationEvent<HTMLDivElement>) => void",
            },
          },
          "onAnimationEndCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: AnimationEvent<HTMLDivElement>) => void",
            },
          },
          "onAnimationIteration": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: AnimationEvent<HTMLDivElement>) => void",
            },
          },
          "onAnimationIterationCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: AnimationEvent<HTMLDivElement>) => void",
            },
          },
          "onAnimationStart": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: AnimationEvent<HTMLDivElement>) => void",
            },
          },
          "onAnimationStartCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: AnimationEvent<HTMLDivElement>) => void",
            },
          },
          "onAuxClick": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onAuxClickCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onBeforeInput": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onBeforeInputCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onBlur": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FocusEvent<HTMLDivElement>) => void",
            },
          },
          "onBlurCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FocusEvent<HTMLDivElement>) => void",
            },
          },
          "onCanPlay": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onCanPlayCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onCanPlayThrough": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onCanPlayThroughCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onChange": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onChangeCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onClick": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onClickCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onCompositionEnd": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: CompositionEvent<HTMLDivElement>) => void",
            },
          },
          "onCompositionEndCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: CompositionEvent<HTMLDivElement>) => void",
            },
          },
          "onCompositionStart": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: CompositionEvent<HTMLDivElement>) => void",
            },
          },
          "onCompositionStartCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: CompositionEvent<HTMLDivElement>) => void",
            },
          },
          "onCompositionUpdate": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: CompositionEvent<HTMLDivElement>) => void",
            },
          },
          "onCompositionUpdateCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: CompositionEvent<HTMLDivElement>) => void",
            },
          },
          "onContextMenu": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onContextMenuCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onCopy": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: ClipboardEvent<HTMLDivElement>) => void",
            },
          },
          "onCopyCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: ClipboardEvent<HTMLDivElement>) => void",
            },
          },
          "onCut": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: ClipboardEvent<HTMLDivElement>) => void",
            },
          },
          "onCutCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: ClipboardEvent<HTMLDivElement>) => void",
            },
          },
          "onDoubleClick": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onDoubleClickCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onDrag": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragEnd": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragEndCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragEnter": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragEnterCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragExit": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragExitCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragLeave": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragLeaveCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragOver": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragOverCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragStart": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDragStartCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDrop": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDropCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: DragEvent<HTMLDivElement>) => void",
            },
          },
          "onDurationChange": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onDurationChangeCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onEmptied": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onEmptiedCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onEncrypted": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onEncryptedCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onEnded": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onEndedCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onError": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onErrorCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onFocus": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FocusEvent<HTMLDivElement>) => void",
            },
          },
          "onFocusCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FocusEvent<HTMLDivElement>) => void",
            },
          },
          "onGotPointerCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onGotPointerCaptureCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onInput": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onInputCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onInvalid": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onInvalidCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onKeyDown": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: KeyboardEvent<HTMLDivElement>) => void",
            },
          },
          "onKeyDownCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: KeyboardEvent<HTMLDivElement>) => void",
            },
          },
          "onKeyPress": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: KeyboardEvent<HTMLDivElement>) => void",
            },
          },
          "onKeyPressCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: KeyboardEvent<HTMLDivElement>) => void",
            },
          },
          "onKeyUp": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: KeyboardEvent<HTMLDivElement>) => void",
            },
          },
          "onKeyUpCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: KeyboardEvent<HTMLDivElement>) => void",
            },
          },
          "onLoad": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onLoadCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onLoadStart": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onLoadStartCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onLoadedData": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onLoadedDataCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onLoadedMetadata": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onLoadedMetadataCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onLostPointerCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onLostPointerCaptureCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onMouseDown": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onMouseDownCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onMouseEnter": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onMouseLeave": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onMouseMove": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onMouseMoveCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onMouseOut": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onMouseOutCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onMouseOver": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onMouseOverCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onMouseUp": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onMouseUpCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void",
            },
          },
          "onPaste": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: ClipboardEvent<HTMLDivElement>) => void",
            },
          },
          "onPasteCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: ClipboardEvent<HTMLDivElement>) => void",
            },
          },
          "onPause": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onPauseCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onPlay": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onPlayCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onPlaying": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onPlayingCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onPointerCancel": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerCancelCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerDown": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerDownCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerEnter": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerEnterCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerLeave": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerLeaveCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerMove": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerMoveCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerOut": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerOutCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerOver": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerOverCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerUp": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onPointerUpCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: PointerEvent<HTMLDivElement>) => void",
            },
          },
          "onProgress": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onProgressCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onRateChange": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onRateChangeCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onReset": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onResetCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onScroll": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: UIEvent<HTMLDivElement, UIEvent>) => void",
            },
          },
          "onScrollCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: UIEvent<HTMLDivElement, UIEvent>) => void",
            },
          },
          "onSeeked": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onSeekedCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onSeeking": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onSeekingCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onSelect": Object {
            "description": "callback to be called when the tab changes
if the function returns false, it can stop chabging to the new tab",
            "type": Object {
              "name": "function",
              "raw": "((name: string, component: StoryComponent) => boolean | void) | ((event: SyntheticEvent<HTMLDivElement, Event>) => void)",
            },
          },
          "onSelectCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onSelectRowsChange": Object {
            "description": "callback when selected rows change",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "function",
              "raw": "(selected: Record<number, boolean>) => void",
            },
          },
          "onStalled": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onStalledCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onSubmit": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onSubmitCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: FormEvent<HTMLDivElement>) => void",
            },
          },
          "onSuspend": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onSuspendCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onTimeUpdate": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onTimeUpdateCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onTouchCancel": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: TouchEvent<HTMLDivElement>) => void",
            },
          },
          "onTouchCancelCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: TouchEvent<HTMLDivElement>) => void",
            },
          },
          "onTouchEnd": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: TouchEvent<HTMLDivElement>) => void",
            },
          },
          "onTouchEndCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: TouchEvent<HTMLDivElement>) => void",
            },
          },
          "onTouchMove": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: TouchEvent<HTMLDivElement>) => void",
            },
          },
          "onTouchMoveCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: TouchEvent<HTMLDivElement>) => void",
            },
          },
          "onTouchStart": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: TouchEvent<HTMLDivElement>) => void",
            },
          },
          "onTouchStartCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: TouchEvent<HTMLDivElement>) => void",
            },
          },
          "onTransitionEnd": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: TransitionEvent<HTMLDivElement>) => void",
            },
          },
          "onTransitionEndCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: TransitionEvent<HTMLDivElement>) => void",
            },
          },
          "onVolumeChange": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onVolumeChangeCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onWaiting": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onWaitingCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: SyntheticEvent<HTMLDivElement, Event>) => void",
            },
          },
          "onWheel": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: WheelEvent<HTMLDivElement>) => void",
            },
          },
          "onWheelCapture": Object {
            "parentName": "DOMAttributes",
            "type": Object {
              "name": "function",
              "raw": "(event: WheelEvent<HTMLDivElement>) => void",
            },
          },
          "opacity": Object {
            "description": "The opacity CSS property sets the transparency of an element or the degree to which content
behind an element is visible.

[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/opacity)",
            "parentName": "OpacityProps",
            "type": Object {
              "name": "ResponsiveValue<GlobalsNumber, Required<Theme<TLengthStyledSystem>>>",
              "raw": "ResponsiveValue<GlobalsNumber, Required<Theme<TLengthStyledSystem>>>",
            },
          },
          "p": Object {
            "description": "Padding on top, left, bottom and right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "padding": Object {
            "description": "Padding on top, left, bottom and right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "paddingBottom": Object {
            "description": "Padding on bottom",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "paddingLeft": Object {
            "description": "Padding on left",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "paddingRight": Object {
            "description": "Padding on right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "paddingTop": Object {
            "description": "Padding on top",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "paddingX": Object {
            "description": "Padding on left and right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "paddingY": Object {
            "description": "Padding on top and bottom",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "pb": Object {
            "description": "Padding on bottom",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "pl": Object {
            "description": "Padding on left",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "placeholder": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "pr": Object {
            "description": "Padding on right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "prefix": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "property": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "pt": Object {
            "description": "Padding on top",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "px": Object {
            "description": "Padding on left and right",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "py": Object {
            "description": "Padding on top and bottom",
            "parentName": "SpaceProps",
            "type": Object {
              "name": "union",
              "raw": "ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
              "value": Array [
                Object {
                  "name": "ResponsiveValue<string",
                },
                Object {
                  "name": "number",
                },
                Object {
                  "name": "symbol, Required<Theme<TLengthStyledSystem>>>",
                },
              ],
            },
          },
          "radioGroup": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "ref": Object {
            "parentName": "ClassAttributes",
            "type": Object {
              "name": "LegacyRef<HTMLDivElement>",
              "raw": "LegacyRef<HTMLDivElement>",
            },
          },
          "renderRowSubComponent": Object {
            "description": "callback to render a SubComponent row",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "function",
              "raw": "(props: { row: Row<{}>; }) => ReactNode",
            },
          },
          "resource": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "results": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "role": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "rowSelect": Object {
            "description": "if true, will enable row selection",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "boolean",
              "raw": "boolean",
            },
          },
          "security": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "skipPageReset": Object {
            "description": "reset state update while update table data",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "boolean",
              "raw": "boolean",
            },
          },
          "slot": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "sorting": Object {
            "description": "enable.disable sorting.",
            "parentName": "TableOwnProps",
            "type": Object {
              "name": "boolean",
              "raw": "boolean",
            },
          },
          "spellCheck": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "Booleanish",
              "raw": "Booleanish",
            },
          },
          "style": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "CSSProperties",
              "raw": "CSSProperties",
            },
          },
          "suppressContentEditableWarning": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "boolean",
              "raw": "boolean",
            },
          },
          "suppressHydrationWarning": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "boolean",
              "raw": "boolean",
            },
          },
          "sx": Object {
            "description": "The sx prop lets you style elements inline, using values from your
theme. To use the sx prop, add the custom pragma as a comment to the
top of your module and import the jsx function.

\`\`\`ts
// @jsx jsx

import { jsx } from 'theme-ui'
\`\`\`",
            "parentName": "SxProps",
            "type": Object {
              "name": "SystemStyleObject",
              "raw": "SystemStyleObject",
            },
          },
          "sxStyle": Object {
            "description": "theme-ui styling object for Block Box",
            "parentName": "BlockContainerProps",
            "type": Object {
              "name": "SystemStyleObject",
              "raw": "SystemStyleObject",
            },
          },
          "tabIndex": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "number",
              "raw": "number",
            },
          },
          "title": Object {
            "description": "optional section title for the block.",
            "parentName": "BlockContainerProps",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "translate": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "enum",
              "raw": "\\"yes\\" | \\"no\\"",
              "value": Array [
                Object {
                  "name": "string",
                  "value": "yes",
                },
                Object {
                  "name": "string",
                  "value": "no",
                },
              ],
            },
          },
          "typeof": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "unselectable": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "enum",
              "raw": "\\"on\\" | \\"off\\"",
              "value": Array [
                Object {
                  "name": "string",
                  "value": "on",
                },
                Object {
                  "name": "string",
                  "value": "off",
                },
              ],
            },
          },
          "variant": Object {
            "parentName": "BoxOwnProps",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
          "visibility": Object {
            "defaultValue": "all",
            "description": "by default will show both controls and props tables
user setting can display only props table or only controls",
            "type": Object {
              "name": "enum",
              "raw": "ComponentVisibility",
              "value": Array [
                Object {
                  "name": "string",
                  "value": "all",
                },
                Object {
                  "name": "string",
                  "value": "controls",
                },
                Object {
                  "name": "string",
                  "value": "info",
                },
              ],
            },
          },
          "vocab": Object {
            "parentName": "HTMLAttributes",
            "type": Object {
              "name": "string",
              "raw": "string",
            },
          },
        },
      },
      "name": "PropsTable",
      "package": "53689598fe7786493f4584ab098c73cc",
      "request": "/Users/atanasster/component-controls/ui/blocks/src/PropsTable/PropsTable.tsx",
    },
  },
  "doc": Object {
    "component": "PropsTable",
    "components": Object {
      "PropsTable": "26090286b0d42fa7a92590e6843f1687",
    },
    "date": 2020-04-18T23:11:55.469Z,
    "dateModified": 2020-05-10T20:19:29.890Z,
    "package": "dd9d92dc79a97d724bc2dff2c5f2aa7a",
    "parameters": Object {
      "component": "PropsTable",
    },
    "title": "Storybook/Blocks/PropsTable",
  },
  "packages": Object {
    "53689598fe7786493f4584ab098c73cc": Object {
      "dependencies": Object {
        "@component-controls/components": "^1.2.0",
        "@component-controls/core": "^1.2.0",
        "@component-controls/editors": "^1.2.0",
        "@component-controls/store": "^1.2.0",
        "@primer/octicons-react": "^9.6.0",
        "@storybook/csf": "^0.0.1",
        "@theme-ui/css": "^0.3.1",
        "@theme-ui/mdx": "^0.3.0",
        "copy-to-clipboard": "^3.2.1",
        "global": "^4.3.2",
        "js-string-escape": "^1.0.1",
        "react": "^16.13.1",
        "react-dom": "^16.13.1",
        "react-table": "^7.0.0",
        "stringify-object": "^3.3.0",
        "theme-ui": "^0.3.1",
      },
      "devDependencies": Object {
        "@theme-ui/presets": "^0.3.0",
        "@types/jest": "^25.1.2",
        "@types/mdx-js__react": "^1.5.1",
        "@types/stringify-object": "^3.2.0",
        "@types/theme-ui": "^0.3.0",
        "cross-env": "^5.2.1",
        "eslint": "^6.5.1",
        "jest": "^24.9.0",
      },
      "fileHash": "53689598fe7786493f4584ab098c73cc",
      "name": "@component-controls/blocks",
      "peerDependencies": Object {
        "@primer/octicons-react": "*",
        "react": "^16.13.1",
        "react-dom": "^16.13.1",
        "react-table": "*",
        "theme-ui": "*",
      },
      "repository": Object {
        "browse": "https://github.com/ccontrols/component-controls/tree/master/ui/blocks/dist/index.js",
        "docs": "https://github.com/ccontrols/component-controls/tree/master#readme",
        "issues": "https://github.com/ccontrols/component-controls/issues",
      },
      "version": "1.2.0",
    },
    "dd9d92dc79a97d724bc2dff2c5f2aa7a": Object {
      "dependencies": Object {
        "@babel/generator": "^7.9.4",
        "@babel/parser": "^7.9.4",
        "@babel/traverse": "^7.9.0",
        "@component-controls/core": "^1.2.0",
        "@hutson/parse-repository-url": "^5.0.0",
        "@mdx-js/loader": "^1.5.5",
        "@mdx-js/react": "^1.6.5",
        "camelcase": "^6.0.0",
        "deepmerge": "^4.2.2",
        "find-cache-dir": "^3.3.1",
        "gray-matter": "^4.0.2",
        "hosted-git-info": "^3.0.4",
        "js-string-escape": "^1.0.1",
        "prettier": "^1.19.1",
        "read-package-json": "^2.1.1",
        "resolve": "^1.15.1",
        "typescript": "^3.8.3",
      },
      "devDependencies": Object {
        "@babel/types": "^7.9.0",
        "@rollup/plugin-node-resolve": "^7.1.1",
        "@types/find-cache-dir": "^3.2.0",
        "@types/hosted-git-info": "^3.0.0",
        "@types/jest": "^25.1.2",
        "cross-env": "^5.2.1",
        "eslint": "^6.5.1",
        "jest": "^24.9.0",
      },
      "fileHash": "dd9d92dc79a97d724bc2dff2c5f2aa7a",
      "name": "@component-controls/instrument",
      "peerDependencies": undefined,
      "repository": Object {
        "browse": "https://github.com/ccontrols/component-controls/tree/master/core/instrument/test/fixtures/csf/props-info/resolve-node-modules.jsx",
        "docs": "https://github.com/ccontrols/component-controls/tree/master#readme",
        "issues": "https://github.com/ccontrols/component-controls/issues",
      },
      "version": "1.2.0",
    },
  },
  "stories": Object {},
  "transformed": "import { PropsTable } from '@component-controls/blocks';

export default {
  title: 'Storybook/Blocks/PropsTable',
  parameters: {
    component: PropsTable,
  },
};
",
}
`;
